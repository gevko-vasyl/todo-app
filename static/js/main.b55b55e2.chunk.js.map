{"version":3,"sources":["hooks/redux.ts","redux/operations/fetchTodos.ts","redux/slices/todoSlice.ts","components/Menu/Menu.styles.tsx","components/Menu/Menu.tsx","components/Todo/Todo.styles.tsx","components/Todo/Todo.tsx","components/TodoList/TodoList.styles.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.styles.tsx","components/TodoForm/TodoForm.tsx","components/Modal/Modal.styles.tsx","components/Modal/Modal.tsx","components/App/App.styles.tsx","components/App/App.tsx","redux/store/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchTodoList","createAsyncThunk","a","axios","get","params","_limit","result","data","todoSlice","createSlice","name","initialState","items","isLoading","error","isTitleShown","isModalOpen","choosenTodoId","reducers","addTodo","state","action","payload","deleteTodo","filter","todo","id","toggleCompleted","map","completed","hideTitle","toggleModal","setChoosenTodoId","updateTodos","title","extraReducers","fulfilled","type","pending","rejected","actions","BurgerContainer","styled","div","MenuContainer","Text","Menu","useState","isMenuShown","setIsMenuShown","dispatch","onClick","size","to","TodoContainer","TodoCheckbox","input","TodoTitle","span","TodoInputTitleContainer","TodoIconsContainer","Todo","onChange","checked","toast","success","TodoListContainer","TodoListTitle","h1","TodoList","todos","useEffect","length","TodoFormContainer","TodoFormTitle","Form","form","FormInput","FormButton","button","TodoForm","setForm","onSubmit","e","preventDefault","target","value","nanoid","placeholder","ModalOverlay","ModalForm","ModalCloseButton","ModalInput","ModalConfirmButton","modalRoot","document","getElementById","Modal","todoValue","setTodoValue","createPortal","Container","AppTitle","App","isModalShown","path","position","toastOptions","duration","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","todosPersistConfig","key","storage","store","configureStore","reducer","persistReducer","todoReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading"],"mappings":"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","file":"static/js/main.b55b55e2.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '../redux/store/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const fetchTodoList = createAsyncThunk('todo/fetchTodoList', async () => {\r\n  const result = await axios.get('https://jsonplaceholder.typicode.com/todos', {\r\n    params: { _limit: 10 },\r\n  });\r\n  return result.data;\r\n});\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { fetchTodoList } from '../operations/fetchTodos';\r\nimport { ITodo } from '../../types/ITodo';\r\n\r\nexport interface TodoAppState {\r\n  items: ITodo[];\r\n  isLoading: boolean;\r\n  error: string;\r\n  isTitleShown: boolean;\r\n  isModalOpen: boolean;\r\n  choosenTodoId: string | number;\r\n}\r\n\r\nconst initialState: TodoAppState = {\r\n  items: [],\r\n  isLoading: false,\r\n  error: '',\r\n  isTitleShown: true,\r\n  isModalOpen: false,\r\n  choosenTodoId: '',\r\n};\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n    addTodo: (state, action: PayloadAction<ITodo>) => {\r\n      state.items = [...state.items, action.payload];\r\n    },\r\n    deleteTodo: (state, action: PayloadAction<string | number>) => {\r\n      state.items = state.items.filter(todo => todo.id !== action.payload);\r\n    },\r\n    toggleCompleted: (state, action: PayloadAction<string | number>) => {\r\n      state.items = state.items.map(todo =>\r\n        todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo,\r\n      );\r\n    },\r\n    hideTitle: state => {\r\n      state.isTitleShown = false;\r\n    },\r\n    toggleModal: state => {\r\n      state.isModalOpen = !state.isModalOpen;\r\n    },\r\n    setChoosenTodoId: (state, action: PayloadAction<string | number>) => {\r\n      state.choosenTodoId = action.payload;\r\n    },\r\n    updateTodos: (state, action: PayloadAction<string>) => {\r\n      state.items = state.items.map(todo =>\r\n        todo.id === state.choosenTodoId ? { ...todo, title: action.payload } : todo,\r\n      );\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchTodoList.fulfilled.type]: (state, action: PayloadAction<ITodo[]>) => {\r\n      state.isLoading = false;\r\n      state.error = '';\r\n      state.items = [...action.payload, ...state.items];\r\n    },\r\n    [fetchTodoList.pending.type]: state => {\r\n      state.isLoading = true;\r\n    },\r\n    [fetchTodoList.rejected.type]: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTodo,\r\n  deleteTodo,\r\n  toggleCompleted,\r\n  hideTitle,\r\n  toggleModal,\r\n  setChoosenTodoId,\r\n  updateTodos,\r\n} = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const BurgerContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: fixed;\r\n  width: 60px;\r\n  height: 60px;\r\n  top: 15%;\r\n  left: 7%;\r\n  border-radius: 50%;\r\n  background-color: #232127;\r\n  cursor: pointer;\r\n  transition: 0.3s cubic-bezier(0.3, 0, 0.5, 1);\r\n  transition-property: all;\r\n  & svg {\r\n    fill: #dde0dc;\r\n  }\r\n  &:hover {\r\n    background-color: gray;\r\n  }\r\n`;\r\n\r\nexport const MenuContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  position: fixed;\r\n  list-style: none;\r\n  margin-top: 30vh;\r\n  width: 15%;\r\n  height: 30%;\r\n  left: 2%;\r\n  border-radius: 13px;\r\n  background-color: #232127;\r\n  & a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 200px;\r\n  height: 60px;\r\n  font-size: 25px;\r\n  color: #dde0dc;\r\n  border-radius: 10px;\r\n  transition: 0.3s cubic-bezier(0.3, 0, 0.5, 1);\r\n  transition-property: all;\r\n  &:hover {\r\n    background-color: #90a2aa;\r\n  }\r\n  & svg {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAppDispatch } from '../../hooks/redux';\r\nimport { hideTitle } from '../../redux/slices/todoSlice';\r\nimport { MenuContainer, Text, BurgerContainer } from './Menu.styles';\r\nimport { GiHamburgerMenu } from 'react-icons/gi';\r\nimport { BsListTask } from 'react-icons/bs';\r\nimport { MdCreate } from 'react-icons/md';\r\n\r\nexport default function Menu() {\r\n  const [isMenuShown, setIsMenuShown] = useState(false);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const menuHandler = () => {\r\n    setIsMenuShown(!isMenuShown);\r\n    dispatch(hideTitle());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <BurgerContainer onClick={menuHandler}>\r\n        <GiHamburgerMenu size='35' />\r\n      </BurgerContainer>\r\n\r\n      {isMenuShown && (\r\n        <MenuContainer>\r\n          <Link to='/createform'>\r\n            <Text>\r\n              <MdCreate />\r\n              Create Todo\r\n            </Text>\r\n          </Link>\r\n\r\n          <Link to='/todos'>\r\n            <Text>\r\n              <BsListTask />\r\n              Todo list\r\n            </Text>\r\n          </Link>\r\n        </MenuContainer>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const TodoContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 75%;\r\n  height: 65px;\r\n  margin-top: 10px;\r\n  padding-right: 30px;\r\n  padding-left: 30px;\r\n  background-color: #232127;\r\n  border-radius: 10px;\r\n\r\n  & input:checked + span {\r\n    text-decoration: line-through;\r\n  }\r\n  & svg {\r\n    fill: #90a2aa;\r\n  }\r\n  & svg:hover {\r\n    cursor: pointer;\r\n    fill: #f5f5f5;\r\n  }\r\n`;\r\n\r\nexport const TodoCheckbox = styled.input`\r\n  margin-right: 20px;\r\n  width: 40px;\r\n  height: 20px;\r\n`;\r\n\r\nexport const TodoTitle = styled.span`\r\n  color: #f5f5f5;\r\n`;\r\n\r\nexport const TodoInputTitleContainer = styled.div`\r\n  display: flex;\r\n\r\n  & svg {\r\n    margin-right: 20px;\r\n    width: 2 rem;\r\n    height: 2 rem;\r\n    border-radius: 8 px;\r\n  }\r\n`;\r\n\r\nexport const TodoIconsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  & svg {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n","import toast from 'react-hot-toast';\r\nimport { useAppDispatch } from '../../hooks/redux';\r\nimport { ITodo } from '../../types/ITodo';\r\nimport {\r\n  deleteTodo,\r\n  toggleCompleted,\r\n  toggleModal,\r\n  setChoosenTodoId,\r\n} from '../../redux/slices/todoSlice';\r\nimport { FaTrashAlt, FaEdit } from 'react-icons/fa';\r\nimport {\r\n  TodoContainer,\r\n  TodoCheckbox,\r\n  TodoTitle,\r\n  TodoIconsContainer,\r\n  TodoInputTitleContainer,\r\n} from './Todo.styles';\r\n\r\ninterface Props {\r\n  todo: ITodo;\r\n}\r\n\r\nexport default function Todo({ todo }: Props) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const editDispatchHandler = () => {\r\n    dispatch(setChoosenTodoId(todo.id));\r\n    dispatch(toggleModal());\r\n  };\r\n\r\n  const deleteTodoHandler = () => {\r\n    dispatch(deleteTodo(todo.id));\r\n    toast.success('Todo was succesfully removed from your list');\r\n  };\r\n\r\n  return (\r\n    <TodoContainer>\r\n      <TodoInputTitleContainer>\r\n        <TodoCheckbox\r\n          type='checkbox'\r\n          onChange={() => dispatch(toggleCompleted(todo.id))}\r\n          checked={todo.completed}\r\n        />\r\n        <TodoTitle>{todo.title}</TodoTitle>\r\n      </TodoInputTitleContainer>\r\n\r\n      <TodoIconsContainer>\r\n        <FaEdit size='25' onClick={editDispatchHandler} />\r\n        <FaTrashAlt size='25' onClick={deleteTodoHandler} />\r\n      </TodoIconsContainer>\r\n    </TodoContainer>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const TodoListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 180px;\r\n  margin-left: 220px;\r\n`;\r\n\r\nexport const TodoListTitle = styled.h1`\r\n  align-self: center;\r\n  color: #90a2aa;\r\n  font-size: 40px;\r\n`;\r\n","import { useEffect } from 'react';\r\nimport { ITodo } from '../../types/ITodo';\r\nimport { useAppSelector, useAppDispatch } from '../../hooks/redux';\r\nimport { fetchTodoList } from '../../redux/operations/fetchTodos';\r\nimport Todo from '../Todo/Todo';\r\nimport { TodoListContainer, TodoListTitle } from './TodoList.styles';\r\n\r\nexport default function TodoList() {\r\n  const todos = useAppSelector<ITodo[]>(state => state.items);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (todos.length) {\r\n      return;\r\n    }\r\n    dispatch(fetchTodoList());\r\n  }, [dispatch, todos.length]);\r\n\r\n  return (\r\n    <TodoListContainer>\r\n      <TodoListTitle>My Todo List</TodoListTitle>\r\n      {todos.map(todo => (\r\n        <Todo key={todo.id} todo={todo} />\r\n      ))}\r\n    </TodoListContainer>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const TodoFormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const TodoFormTitle = styled.h1`\r\n  font-size: 40px;\r\n  color: #90a2aa;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding-left: 30px;\r\n  width: 500px;\r\n  height: 60px;\r\n  background-color: #232127;\r\n  border: none;\r\n  outline: none;\r\n  color: #fff;\r\n  border-radius: 4px;\r\n  &:focus {\r\n    border: 1px solid white;\r\n  }\r\n`;\r\nexport const FormButton = styled.button`\r\n  margin-top: 30px;\r\n  width: 250px;\r\n  height: 50px;\r\n  background-color: #90a2aa;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #dfe2de;\r\n    border: 2px solid #232127;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useAppDispatch } from '../../hooks/redux';\r\nimport { nanoid } from 'nanoid';\r\nimport toast from 'react-hot-toast';\r\nimport { ITodo } from '../../types/ITodo';\r\nimport { addTodo } from '../../redux/slices/todoSlice';\r\nimport { TodoFormContainer, TodoFormTitle, Form, FormInput, FormButton } from './TodoForm.styles';\r\n\r\nconst initialState = {\r\n  // userId: 13,\r\n  id: '',\r\n  title: '',\r\n  completed: false,\r\n};\r\n\r\nexport default function TodoForm() {\r\n  const [form, setForm] = useState<ITodo>(initialState);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const title = e.target.value;\r\n    setForm({ ...form, title: title, id: nanoid() });\r\n  };\r\n\r\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(addTodo(form));\r\n    setForm(initialState);\r\n    toast.success('New todo succesfully added to your list');\r\n  };\r\n\r\n  return (\r\n    <TodoFormContainer>\r\n      <TodoFormTitle>What you gonna do?</TodoFormTitle>\r\n      <Form onSubmit={submitHandler}>\r\n        <FormInput onChange={inputHandler} placeholder='Write a todo' value={form.title} />\r\n        <FormButton type='submit'> Create</FormButton>\r\n      </Form>\r\n    </TodoFormContainer>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ModalOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n`;\r\nexport const ModalForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  width: 600px;\r\n  height: 300px;\r\n  background: #121212;\r\n  border-radius: 10px;\r\n`;\r\nexport const ModalCloseButton = styled.div`\r\n  align-self: flex-end;\r\n  margin-right: 20px;\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: #232127;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  & svg {\r\n    fill: #dde0dc;\r\n  }\r\n  &:hover {\r\n    background-color: gray;\r\n  }\r\n`;\r\nexport const ModalInput = styled.input`\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  width: 410px;\r\n  height: 124px;\r\n  padding: 20px;\r\n  background-color: #232127;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  color: #fff;\r\n  font-size: 24px;\r\n  &:focus {\r\n    border: 1px solid white;\r\n  }\r\n`;\r\nexport const ModalConfirmButton = styled.button`\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  width: 200px;\r\n  height: 40px;\r\n  background: #0f6fff;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n  &:hover {\r\n    background-color: #dfe2de;\r\n    border: 2px solid #232127;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { useAppDispatch } from '../../hooks/redux';\r\nimport { toggleModal, updateTodos } from '../../redux/slices/todoSlice';\r\nimport { MdClose } from 'react-icons/md';\r\nimport {\r\n  ModalOverlay,\r\n  ModalForm,\r\n  ModalCloseButton,\r\n  ModalInput,\r\n  ModalConfirmButton,\r\n} from './Modal.styles';\r\n\r\nconst modalRoot = document.getElementById('modalRoot') as HTMLElement;\r\n\r\nexport default function Modal() {\r\n  const [todoValue, setTodoValue] = useState<string>('');\r\n  const dispatch = useAppDispatch();\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setTodoValue(value);\r\n  };\r\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(updateTodos(todoValue));\r\n    dispatch(toggleModal());\r\n    setTodoValue('');\r\n    toast.success('You succesfully change your todo');\r\n  };\r\n  return createPortal(\r\n    <ModalOverlay>\r\n      <ModalForm onSubmit={submitHandler}>\r\n        <ModalCloseButton onClick={() => dispatch(toggleModal())}>\r\n          <MdClose size='30' />\r\n        </ModalCloseButton>\r\n        <ModalInput type='text' placeholder='Edit your todo' onChange={inputHandler} />\r\n        <ModalConfirmButton type='submit'>Confirm changes</ModalConfirmButton>\r\n      </ModalForm>\r\n    </ModalOverlay>,\r\n    modalRoot,\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  background-color: #f5f5f5;\r\n  box-sizing: border-box;\r\n  padding-top: 20px;\r\n  min-height: 100vh;\r\n  position: relative;\r\n  background-color: #303239;\r\n`;\r\n\r\nexport const AppTitle = styled.h1`\r\n  text-align: center;\r\n  color: #90a2aa;\r\n`;\r\n","import { Switch, Route } from 'react-router-dom';\nimport { useAppSelector } from '../../hooks/redux';\nimport { Toaster } from 'react-hot-toast';\nimport Menu from '../Menu/Menu';\nimport TodoList from '../TodoList/TodoList';\nimport TodoForm from '../TodoForm/TodoForm';\nimport Modal from '../Modal/Modal';\n\nimport 'modern-normalize/modern-normalize.css';\nimport { Container, AppTitle } from './App.styles';\n\nfunction App() {\n  const isTitleShown = useAppSelector<boolean>(state => state.isTitleShown);\n  const isModalShown = useAppSelector<boolean>(state => state.isModalOpen);\n  return (\n    <Container>\n      <Menu />\n      {isTitleShown && <AppTitle>Welcome to your Todo App! Click on menu to start.</AppTitle>}\n      <Switch>\n        <Route path='/createform'>\n          <TodoForm />\n        </Route>\n        <Route path='/todos'>\n          <TodoList />\n        </Route>\n      </Switch>\n      {isModalShown && <Modal />}\n      <Toaster position='top-right' toastOptions={{ duration: 2000 }} />\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport todoReducer from '../slices/todoSlice';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst todosPersistConfig = {\r\n  key: 'todos',\r\n  storage,\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer(todosPersistConfig, todoReducer),\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\nexport type RootState = ReturnType<typeof todoReducer>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App/App';\nimport { store, persistor } from './redux/store/store';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}